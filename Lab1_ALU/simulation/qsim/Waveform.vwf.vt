// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/16/2021 19:23:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          BUSMUX4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BUSMUX4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] IN0;
reg [3:0] IN1;
reg [3:0] IN2;
reg [3:0] IN3;
reg [1:0] SEL;
// wires                                               
wire [3:0] OUTPUT;

// assign statements (if any)                          
BUSMUX4 i1 (
// port map - connection between master ports and signals/registers   
	.IN0(IN0),
	.IN1(IN1),
	.IN2(IN2),
	.IN3(IN3),
	.\OUTPUT (OUTPUT),
	.SEL(SEL)
);
initial 
begin 
#1000000 $finish;
end 
// IN0[ 3 ]
initial
begin
	IN0[3] = 1'b0;
	IN0[3] = #40000 1'b1;
	IN0[3] = #70000 1'b0;
end 
// IN0[ 2 ]
initial
begin
	IN0[2] = 1'b1;
	IN0[2] = #40000 1'b0;
	IN0[2] = #70000 1'b1;
	IN0[2] = #110000 1'b0;
	IN0[2] = #60000 1'b1;
	IN0[2] = #60000 1'b0;
end 
// IN0[ 1 ]
initial
begin
	IN0[1] = 1'b0;
	IN0[1] = #280000 1'b1;
	IN0[1] = #60000 1'b0;
	IN0[1] = #10000 1'b1;
	IN0[1] = #150000 1'b0;
end 
// IN0[ 0 ]
initial
begin
	IN0[0] = 1'b0;
	IN0[0] = #110000 1'b1;
	IN0[0] = #230000 1'b0;
	IN0[0] = #10000 1'b1;
	IN0[0] = #150000 1'b0;
end 
// IN1[ 3 ]
initial
begin
	IN1[3] = 1'b0;
	IN1[3] = #280000 1'b1;
	IN1[3] = #130000 1'b0;
end 
// IN1[ 2 ]
initial
begin
	IN1[2] = 1'b1;
	IN1[2] = #110000 1'b0;
	IN1[2] = #50000 1'b1;
	IN1[2] = #120000 1'b0;
end 
// IN1[ 1 ]
initial
begin
	IN1[1] = 1'b0;
	IN1[1] = #210000 1'b1;
	IN1[1] = #70000 1'b0;
	IN1[1] = #130000 1'b1;
	IN1[1] = #130000 1'b0;
end 
// IN1[ 0 ]
initial
begin
	IN1[0] = 1'b1;
	IN1[0] = #150000 1'b0;
	IN1[0] = #130000 1'b1;
	IN1[0] = #130000 1'b0;
end 
// IN2[ 3 ]
initial
begin
	IN2[3] = 1'b0;
end 
// IN2[ 2 ]
initial
begin
	IN2[2] = 1'b0;
	IN2[2] = #240000 1'b1;
	IN2[2] = #300000 1'b0;
end 
// IN2[ 1 ]
initial
begin
	IN2[1] = 1'b0;
	IN2[1] = #40000 1'b1;
	IN2[1] = #200000 1'b0;
end 
// IN2[ 0 ]
initial
begin
	IN2[0] = 1'b1;
	IN2[0] = #40000 1'b0;
	IN2[0] = #90000 1'b1;
	IN2[0] = #110000 1'b0;
	IN2[0] = #130000 1'b1;
	IN2[0] = #170000 1'b0;
end 
// IN3[ 3 ]
initial
begin
	IN3[3] = 1'b0;
end 
// IN3[ 2 ]
initial
begin
	IN3[2] = 1'b1;
	IN3[2] = #540000 1'b0;
end 
// IN3[ 1 ]
initial
begin
	IN3[1] = 1'b1;
	IN3[1] = #540000 1'b0;
end 
// IN3[ 0 ]
initial
begin
	IN3[0] = 1'b1;
	IN3[0] = #540000 1'b0;
end 
// SEL[ 1 ]
initial
begin
	SEL[1] = 1'b0;
	SEL[1] = #40000 1'b1;
	SEL[1] = #40000 1'b0;
	SEL[1] = #40000 1'b1;
	SEL[1] = #40000 1'b0;
	SEL[1] = #40000 1'b1;
	SEL[1] = #40000 1'b0;
	SEL[1] = #40000 1'b1;
	SEL[1] = #40000 1'b0;
	SEL[1] = #40000 1'b1;
	SEL[1] = #40000 1'b0;
	SEL[1] = #40000 1'b1;
	SEL[1] = #40000 1'b0;
	SEL[1] = #40000 1'b1;
	SEL[1] = #40000 1'b0;
end 
// SEL[ 0 ]
initial
begin
	SEL[0] = 1'b0;
	SEL[0] = #20000 1'b1;
	SEL[0] = #20000 1'b0;
	SEL[0] = #20000 1'b1;
	SEL[0] = #20000 1'b0;
	SEL[0] = #20000 1'b1;
	SEL[0] = #20000 1'b0;
	SEL[0] = #20000 1'b1;
	SEL[0] = #20000 1'b0;
	SEL[0] = #20000 1'b1;
	SEL[0] = #20000 1'b0;
	SEL[0] = #20000 1'b1;
	SEL[0] = #20000 1'b0;
	SEL[0] = #20000 1'b1;
	SEL[0] = #20000 1'b0;
	SEL[0] = #20000 1'b1;
	SEL[0] = #20000 1'b0;
	SEL[0] = #20000 1'b1;
	SEL[0] = #20000 1'b0;
	SEL[0] = #20000 1'b1;
	SEL[0] = #20000 1'b0;
	SEL[0] = #20000 1'b1;
	SEL[0] = #20000 1'b0;
	SEL[0] = #20000 1'b1;
	SEL[0] = #20000 1'b0;
	SEL[0] = #20000 1'b1;
	SEL[0] = #20000 1'b0;
	SEL[0] = #20000 1'b1;
	SEL[0] = #20000 1'b0;
end 
endmodule

